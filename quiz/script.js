// Quiz script loaded
console.log('üöÄ Quiz script loaded successfully!');

// Quiz questions data - will be loaded from database
let quizData = [
    {
        question: "–ö–∞–∫–≤–æ –µ –∫–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑?",
        options: [
            "–§–∏–∑–∏—á–µ—Å–∫–∏ —Ç–æ—Ä–º–æ–∑ –≤ —Ä–µ–∞–ª–Ω–∏—è —Å–≤—è—Ç",
            "–¢–æ—Ä–º–æ–∑ —á—Ä–µ–∑ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
            "–°–ø–æ–¥–µ–ª—è–Ω–µ –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –æ–Ω–ª–∞–π–Ω",
            "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª–Ω–∞ –¥–µ–π–Ω–æ—Å—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
        ],
        correct: 1,
        category: "definition",
        explanation: "–ö–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑—ä—Ç –µ —Ñ–æ—Ä–º–∞ –Ω–∞ —Ç–æ—Ä–º–æ–∑, –∫–æ—è—Ç–æ —Å–µ –∏–∑–≤—ä—Ä—à–≤–∞ —á—Ä–µ–∑ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ - –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å–æ—Ü–∏–∞–ª–Ω–∏ –º—Ä–µ–∂–∏ –∏ –¥—Ä—É–≥–∏ –¥–∏–≥–∏—Ç–∞–ª–Ω–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏."
    },
    {
        question: "–ö–æ—è –æ—Ç —Å–ª–µ–¥–Ω–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ù–ï –µ —Ç–∏–ø–∏—á–Ω–∞ –∑–∞ –∫–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑–∞?",
        options: [
            "–î–æ—Å—Ç—ä–ø–Ω–æ—Å—Ç 24 —á–∞—Å–∞ –≤ –¥–µ–Ω–æ–Ω–æ—â–∏–µ—Ç–æ",
            "–í—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç",
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
            "–ë—ä—Ä–∑–æ —Ä–∞–∑–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ"
        ],
        correct: 2,
        category: "definition",
        explanation: "–ö–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑—ä—Ç –Ω–µ –µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ - —Ç–æ–≤–∞ –µ –µ–¥–Ω–∞ –æ—Ç –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –º—É —Ä–∞–∑–ª–∏–∫–∏ –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∏—è —Ç–æ—Ä–º–æ–∑."
    },
    {
        question: "–ö–æ–π –æ—Ç —Å–ª–µ–¥–Ω–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞ –∫–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑?",
        options: [
            "–°–ø–æ–¥–µ–ª—è–Ω–µ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª–Ω–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏",
            "–ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∑–∞–ø–ª–∞—à–∏—Ç–µ–ª–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞",
            "–ü–æ–∑–¥—Ä–∞–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∏—è—Ç–µ–ª–∏ –≤ —Å–æ—Ü–∏–∞–ª–Ω–∏—Ç–µ –º—Ä–µ–∂–∏",
            "–£—á–∞—Å—Ç–∏–µ –≤ –æ–Ω–ª–∞–π–Ω –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞"
        ],
        correct: 1,
        category: "types",
        explanation: "–ò–∑–ø—Ä–∞—â–∞–Ω–µ—Ç–æ –Ω–∞ –∑–∞–ø–ª–∞—à–∏—Ç–µ–ª–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è –µ —è—Å–µ–Ω –ø—Ä–∏–º–µ—Ä –∑–∞ –∫–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑, —Ç—ä–π –∫–∞—Ç–æ –∏–º–∞ –∑–∞ —Ü–µ–ª –¥–∞ —É–ø–ª–∞—à–∏ –∏ –Ω–∞—Ä–∞–Ω–∏ –∂–µ—Ä—Ç–≤–∞—Ç–∞."
    },
    {
        question: "–ö–∞–∫–≤–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç–µ –ø—ä—Ä–≤–æ, –∞–∫–æ —Å—Ç–∞–Ω–µ—Ç–µ –∂–µ—Ä—Ç–≤–∞ –Ω–∞ –∫–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑?",
        options: [
            "–î–∞ –æ—Ç–≥–æ–≤–æ—Ä–∏—Ç–µ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ –Ω–∞ –Ω–∞–ø–∞–¥–∞—Ç–µ–ª—è",
            "–î–∞ –∑–∞–ø–∞–∑–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–∞ –∏ –±–ª–æ–∫–∏—Ä–∞—Ç–µ –Ω–∞–ø–∞–¥–∞—Ç–µ–ª—è",
            "–î–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏ –≤ —Å–æ—Ü–∏–∞–ª–Ω–∏—Ç–µ –º—Ä–µ–∂–∏",
            "–î–∞ —Å–ø–æ–¥–µ–ª–∏—Ç–µ –ª–∏—á–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∑–∞—â–∏—Ç–∞"
        ],
        correct: 1,
        category: "protection",
        explanation: "–ü—ä—Ä–≤–∞—Ç–∞ —Å—Ç—ä–ø–∫–∞ –µ –¥–∞ –∑–∞–ø–∞–∑–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—Å—Ç–≤–∞ (—Å–Ω–∏–º–∫–∏, —Å—ä–æ–±—â–µ–Ω–∏—è) –∏ –¥–∞ –±–ª–æ–∫–∏—Ä–∞—Ç–µ –Ω–∞–ø–∞–¥–∞—Ç–µ–ª—è, –∑–∞ –¥–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞."
    },
    {
        question: "–ö–æ–µ –æ—Ç —Å–ª–µ–¥–Ω–∏—Ç–µ –µ –ø—Ä–∏–º–µ—Ä –∑–∞ –ø—Ä–µ–≤–µ–Ω—Ü–∏—è –æ—Ç –∫–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑?",
        options: [
            "–°–ø–æ–¥–µ–ª—è–Ω–µ –Ω–∞ –ª–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏ —Å –≤—Å–∏—á–∫–∏",
            "–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Å–∏–ª–Ω–∏ –ø–∞—Ä–æ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –ø–æ–≤–µ—Ä–∏—Ç–µ–ª–Ω–æ—Å—Ç",
            "–ü—Ä–∏–µ–º–∞–Ω–µ –Ω–∞ –ø–æ–∫–∞–Ω–∏ –æ—Ç –Ω–µ–ø–æ–∑–Ω–∞—Ç–∏ —Ö–æ—Ä–∞",
            "–ü—É–±–ª–∏–∫—É–≤–∞–Ω–µ –Ω–∞ –∞–¥—Ä–µ—Å–∞ —Å–∏ –æ–Ω–ª–∞–π–Ω"
        ],
        correct: 1,
        category: "protection",
        explanation: "–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Å–∏–ª–Ω–∏ –ø–∞—Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∏–ª–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –ø–æ–≤–µ—Ä–∏—Ç–µ–ª–Ω–æ—Å—Ç —Å–∞ –æ—Å–Ω–æ–≤–Ω–∏ –º–µ—Ä–∫–∏ –∑–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑."
    },
    {
        question: "–î–∏–≥–∏—Ç–∞–ª–Ω–∞—Ç–∞ –µ—Ç–∏–∫–∞ –≤–∫–ª—é—á–≤–∞:",
        options: [
            "–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏—Ç–µ —Å–∞–º–æ –∑–∞ –∑–∞–±–∞–≤–ª–µ–Ω–∏–µ",
            "–û—Ç–≥–æ–≤–æ—Ä–Ω–æ –∏ –∑–∞—á–∏—Ç–∞—â–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –¥–∏–≥–∏—Ç–∞–ª–Ω–∞—Ç–∞ —Å—Ä–µ–¥–∞",
            "–ò–≥–Ω–æ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
            "–°–ø–æ–¥–µ–ª—è–Ω–µ –Ω–∞ —Ñ–∞–ª—à–∏–≤–∏ –Ω–æ–≤–∏–Ω–∏"
        ],
        correct: 1,
        category: "ethics",
        explanation: "–î–∏–≥–∏—Ç–∞–ª–Ω–∞—Ç–∞ –µ—Ç–∏–∫–∞ —Å–µ –æ—Ç–Ω–∞—Å—è –¥–æ –æ—Ç–≥–æ–≤–æ—Ä–Ω–æ—Ç–æ, –µ—Ç–∏—á–Ω–æ –∏ –∑–∞—á–∏—Ç–∞—â–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –¥–∏–≥–∏—Ç–∞–ª–Ω–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."
    },
    {
        question: "–ö–∞–∫–≤–æ –º–æ–∂–µ –¥–∞ —Å–µ —Å–ª—É—á–∏ —Å –¥–∏–≥–∏—Ç–∞–ª–Ω–æ—Ç–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ, –∫–æ–µ—Ç–æ –ø—É–±–ª–∏–∫—É–≤–∞—Ç–µ –æ–Ω–ª–∞–π–Ω?",
        options: [
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–µ –∏–∑—Ç—Ä–∏–≤–∞ —Å–ª–µ–¥ 24 —á–∞—Å–∞",
            "–û—Å—Ç–∞–≤–∞ —Å–∞–º–æ –Ω–∞ –≤–∞—à–µ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
            "–ú–æ–∂–µ –¥–∞ –æ—Å—Ç–∞–Ω–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∑–∞–≤–∏–Ω–∞–≥–∏",
            "–°–µ –ø–æ–∫–∞–∑–≤–∞ —Å–∞–º–æ –Ω–∞ –ø—Ä–∏—è—Ç–µ–ª–∏—Ç–µ –≤–∏"
        ],
        correct: 2,
        category: "ethics",
        explanation: "–î–∏–≥–∏—Ç–∞–ª–Ω–æ—Ç–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –º–æ–∂–µ –¥–∞ –æ—Å—Ç–∞–Ω–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥—ä–ª–≥–æ –≤—Ä–µ–º–µ –∏ –¥–∞ –±—ä–¥–µ –¥–æ—Å—Ç—ä–ø–Ω–æ –¥–æ—Ä–∏ —Å–ª–µ–¥ –∫–∞—Ç–æ –º–∏—Å–ª–∏—Ç–µ, —á–µ –≥–æ —Å—Ç–µ –∏–∑—Ç—Ä–∏–ª–∏."
    },
    {
        question: "–ö–æ–π –æ—Ä–≥–∞–Ω –≤ –ë—ä–ª–≥–∞—Ä–∏—è —Å–µ –∑–∞–Ω–∏–º–∞–≤–∞ —Å –∫–∏–±–µ—Ä–ø—Ä–µ—Å—Ç—ä–ø–ª–µ–Ω–∏—è?",
        options: [
            "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ—Ç–æ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ—Ç–æ",
            "–î—ä—Ä–∂–∞–≤–Ω–∞ –∞–≥–µ–Ω—Ü–∏—è \"–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\"",
            "–ì–ª–∞–≤–Ω–∞ –¥–∏—Ä–µ–∫—Ü–∏—è \"–ë–æ—Ä–±–∞ —Å –æ—Ä–≥–∞–Ω–∏–∑–∏—Ä–∞–Ω–∞—Ç–∞ –ø—Ä–µ—Å—Ç—ä–ø–Ω–æ—Å—Ç\"",
            "–ö–æ–º–∏—Å–∏—è—Ç–∞ –∑–∞ –∑–∞—â–∏—Ç–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ"
        ],
        correct: 2,
        category: "legal",
        explanation: "–í –ë—ä–ª–≥–∞—Ä–∏—è –∫–∏–±–µ—Ä–ø—Ä–µ—Å—Ç—ä–ø–ª–µ–Ω–∏—è—Ç–∞ —Å–µ —Ä–∞–∑—Å–ª–µ–¥–≤–∞—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—Ç–µ –∑–≤–µ–Ω–∞ –≤ –ú–í–†, –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ –ì–î–ë–û–ü."
    },
    {
        question: "–ö–∞–∫–≤–æ –ù–ï —Ç—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–∞–≤–∏—Ç–µ –≤ —Å–æ—Ü–∏–∞–ª–Ω–∏—Ç–µ –º—Ä–µ–∂–∏?",
        options: [
            "–î–∞ —Å–ø–æ–¥–µ–ª—è—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏ –º–æ–º–µ–Ω—Ç–∏ –æ—Ç –∂–∏–≤–æ—Ç–∞ —Å–∏",
            "–î–∞ –æ–±—â—É–≤–∞—Ç–µ —Å –ø—Ä–∏—è—Ç–µ–ª–∏ –∏ —Å–µ–º–µ–π—Å—Ç–≤–æ",
            "–î–∞ –ø—É–±–ª–∏–∫—É–≤–∞—Ç–µ —Å–Ω–∏–º–∫–∏ —Å –ª–∏—á–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–æ–∫—É–º–µ–Ω—Ç–∏, –∞–¥—Ä–µ—Å–∏)",
            "–î–∞ —É—á–∞—Å—Ç–≤–∞—Ç–µ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª–Ω–∏ –¥–∏—Å–∫—É—Å–∏–∏"
        ],
        correct: 2,
        category: "protection",
        explanation: "–ù–∏–∫–æ–≥–∞ –Ω–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–ø–æ–¥–µ–ª—è—Ç–µ –ª–∏—á–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏, –∞–¥—Ä–µ—Å–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏ –Ω–æ–º–µ—Ä–∞ –≤ —Å–æ—Ü–∏–∞–ª–Ω–∏—Ç–µ –º—Ä–µ–∂–∏."
    },
    {
        question: "–ö–æ–µ –æ—Ç —Å–ª–µ–¥–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞–∑–≤–∞ –¥–∏–≥–∏—Ç–∞–ª–Ω–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç?",
        options: [
            "–ö–ª–∏–∫–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –≤—Ä—ä–∑–∫–∏ –≤ –∏–º–µ–π–ª–∏—Ç–µ",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏—Ç–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –ø—Ä–µ–¥–∏ —Å–ø–æ–¥–µ–ª—è–Ω–µ",
            "–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –µ–¥–Ω–∞ –∏ —Å—ä—â–∞ –ø–∞—Ä–æ–ª–∞ –∑–∞ –≤—Å–∏—á–∫–∏ –∞–∫–∞—É–Ω—Ç–∏",
            "–°–ø–æ–¥–µ–ª—è–Ω–µ –Ω–∞ –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        ],
        correct: 1,
        category: "ethics",
        explanation: "–î–∏–≥–∏—Ç–∞–ª–Ω–æ –≥—Ä–∞–º–æ—Ç–Ω–∏—è—Ç —á–æ–≤–µ–∫ –≤–∏–Ω–∞–≥–∏ –ø—Ä–æ–≤–µ—Ä—è–≤–∞ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏—Ç–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –ø—Ä–µ–¥–∏ –¥–∞ —è —Å–ø–æ–¥–µ–ª–∏, –∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ —Ä–∞–∑–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ—Ç–æ –Ω–∞ —Ñ–∞–ª—à–∏–≤–∏ –Ω–æ–≤–∏–Ω–∏."
    }
];

// Quiz state
let currentQuestion = 0;
let userAnswers = [];
let quizStarted = false;
let quizCompleted = false;
let quizTimer = null;
let timeRemaining = 0;

// Quiz settings from admin panel
let quizSettings = {
    timeLimit: 15, // minutes
    passingScore: 70, // percentage
    showExplanations: true,
    randomizeQuestions: false
};

// Category tracking
const categories = {
    definition: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
    types: "–í–∏–¥–æ–≤–µ –∫–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑", 
    protection: "–ü—Ä–µ–≤–µ–Ω—Ü–∏—è –∏ –∑–∞—â–∏—Ç–∞",
    legal: "–ü—Ä–∞–≤–Ω–∏ –∞—Å–ø–µ–∫—Ç–∏",
    ethics: "–î–∏–≥–∏—Ç–∞–ª–Ω–∞ –µ—Ç–∏–∫–∞"
};

// DOM elements
const quizSections = {
    info: document.getElementById('quiz-info'),
    questions: document.getElementById('quiz-questions'),
    results: document.getElementById('quiz-results'),
    review: document.getElementById('quiz-review')
};

const elements = {
    startBtn: document.getElementById('start-quiz'),
    prevBtn: document.getElementById('prev-btn'),
    nextBtn: document.getElementById('next-btn'),
    submitBtn: document.getElementById('submit-btn'),
    retryBtn: document.getElementById('retry-quiz'),
    reviewBtn: document.getElementById('review-answers'),
    backToResultsBtn: document.getElementById('back-to-results'),
    
    progressBar: document.getElementById('progress'),
    questionCounter: document.getElementById('current-question'),
    totalQuestions: document.getElementById('total-questions'),
    questionText: document.getElementById('question-text'),
    answersContainer: document.getElementById('answers-container'),
    
    scorePercentage: document.getElementById('score-percentage'),
    scoreText: document.getElementById('score-text'),
    categoriesBreakdown: document.getElementById('categories-breakdown'),
    reviewContainer: document.getElementById('review-container')
};

// Supabase client
let supabase;

// Initialize quiz
document.addEventListener('DOMContentLoaded', async function() {
    console.log('Quiz initialization started...'); // Debug
    
    // Initialize Supabase
    await initializeSupabase();
    console.log('Supabase initialized'); // Debug
    
    // Load admin settings first
    await loadQuizSettings();
    console.log('Settings loaded:', quizSettings); // Debug
    
    // Load questions from database
    await loadQuizQuestions();
    console.log('Questions loaded, count:', quizData.length); // Debug
    
    // Apply randomization if enabled (after questions are loaded)
    if (quizSettings.randomizeQuestions) {
        shuffleArray(quizData);
        console.log('Questions shuffled'); // Debug
    }
    
    setupEventListeners();
    elements.totalQuestions.textContent = quizData.length;
    
    // Update UI with settings (after everything is loaded)
    console.log('Updating quiz info display...'); // Debug
    updateQuizInfoDisplay();
    console.log('Quiz initialization completed'); // Debug
});

async function initializeSupabase() {
    try {
        // Use same credentials as admin panel
        const SUPABASE_URL = 'https://rwlvgzbezcjdmwqidsvu.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ3bHZnemJlemNqZG13cWlkc3Z1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk2NjUzNDIsImV4cCI6MjA2NTI0MTM0Mn0.wtr2Q4ueBH-rhZ6pHpdQm9qdOG5m8dhAczIKHvvHqqw';
        
        supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    } catch (error) {
        // Supabase not available, use fallback data
    }
}

async function loadQuizSettings() {
    try {
        console.log('Loading quiz settings from Supabase...'); // Debug
        
        // Try to load from Supabase first
        if (supabase) {
            const { data, error } = await supabase
                .from('quiz_settings')
                .select('setting_value')
                .eq('setting_key', 'quiz_settings')
                .single();

            if (!error && data && data.setting_value) {
                const settings = data.setting_value;
                console.log('Loaded settings from Supabase:', settings); // Debug
                
                if (settings.timeLimit) quizSettings.timeLimit = parseInt(settings.timeLimit);
                if (settings.passingScore) quizSettings.passingScore = parseInt(settings.passingScore);
                if (settings.hasOwnProperty('showExplanations')) quizSettings.showExplanations = settings.showExplanations;
                if (settings.hasOwnProperty('randomizeQuestions')) quizSettings.randomizeQuestions = settings.randomizeQuestions;
                
                console.log('Final quiz settings from Supabase:', quizSettings); // Debug
                return;
            }
        }
        
        // Fallback to localStorage
        console.log('Falling back to localStorage...'); // Debug
        const savedSettings = localStorage.getItem('admin_settings_quiz');
        console.log('Loading quiz settings from localStorage:', savedSettings); // Debug
        
        if (savedSettings) {
            const settings = JSON.parse(savedSettings);
            console.log('Parsed settings from localStorage:', settings); // Debug
            
            if (settings.timeLimit) quizSettings.timeLimit = parseInt(settings.timeLimit);
            if (settings.passingScore) quizSettings.passingScore = parseInt(settings.passingScore);
            if (settings.hasOwnProperty('showExplanations')) quizSettings.showExplanations = settings.showExplanations;
            if (settings.hasOwnProperty('randomizeQuestions')) quizSettings.randomizeQuestions = settings.randomizeQuestions;
        }
        
        console.log('Final quiz settings:', quizSettings); // Debug
    } catch (error) {
        console.error('Error loading quiz settings:', error);
        // Use default settings if error
    }
}

function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

function updateQuizInfoDisplay() {
    console.log('updateQuizInfoDisplay called'); // Debug
    console.log('Current quizSettings:', quizSettings); // Debug
    
    // Update info section with current settings
    const infoSection = document.querySelector('#quiz-info .quiz-details');
    console.log('Found infoSection:', infoSection); // Debug
    
    if (infoSection) {
        let randomizeInfo = '';
        if (quizSettings.randomizeQuestions) {
            randomizeInfo = '<div class="info-item"><strong>‚ö†Ô∏è –í—ä–ø—Ä–æ—Å–∏—Ç–µ —Å–∞ —Ä–∞–∑–±—ä—Ä–∫–∞–Ω–∏</strong></div>';
        }
        
        const htmlContent = `
            <div class="info-item">
                <strong>–ë—Ä–æ–π –≤—ä–ø—Ä–æ—Å–∏:</strong> ${quizData.length}
            </div>
            <div class="info-item">
                <strong>–í—Ä–µ–º–µ –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ:</strong> ${quizSettings.timeLimit} –º–∏–Ω—É—Ç–∏
            </div>
            <div class="info-item">
                <strong>–ú–∏–Ω–∏–º–∞–ª–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç:</strong> ${quizSettings.passingScore}%
            </div>
            <div class="info-item">
                <strong>–û–±—è—Å–Ω–µ–Ω–∏—è:</strong> ${quizSettings.showExplanations ? '–î–∞' : '–ù–µ'}
            </div>
            ${randomizeInfo}
        `;
        
        console.log('Setting innerHTML to:', htmlContent); // Debug
        infoSection.innerHTML = htmlContent;
        console.log('innerHTML set successfully'); // Debug
    } else {
        console.error('Could not find .quiz-details element!'); // Debug
        
        // Try alternative selector
        const altSection = document.querySelector('#quiz-info');
        console.log('Alternative quiz-info element:', altSection); // Debug
        
        if (altSection) {
            // Create the quiz-details div if it doesn't exist
            let detailsDiv = altSection.querySelector('.quiz-details');
            if (!detailsDiv) {
                detailsDiv = document.createElement('div');
                detailsDiv.className = 'quiz-details';
                altSection.appendChild(detailsDiv);
                console.log('Created quiz-details div'); // Debug
            }
            
            let randomizeInfo = '';
            if (quizSettings.randomizeQuestions) {
                randomizeInfo = '<div class="info-item"><strong>‚ö†Ô∏è –í—ä–ø—Ä–æ—Å–∏—Ç–µ —Å–∞ —Ä–∞–∑–±—ä—Ä–∫–∞–Ω–∏</strong></div>';
            }
            
            detailsDiv.innerHTML = `
                <div class="info-item">
                    <strong>–ë—Ä–æ–π –≤—ä–ø—Ä–æ—Å–∏:</strong> ${quizData.length}
                </div>
                <div class="info-item">
                    <strong>–í—Ä–µ–º–µ –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ:</strong> ${quizSettings.timeLimit} –º–∏–Ω—É—Ç–∏
                </div>
                <div class="info-item">
                    <strong>–ú–∏–Ω–∏–º–∞–ª–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç:</strong> ${quizSettings.passingScore}%
                </div>
                <div class="info-item">
                    <strong>–û–±—è—Å–Ω–µ–Ω–∏—è:</strong> ${quizSettings.showExplanations ? '–î–∞' : '–ù–µ'}
                </div>
                ${randomizeInfo}
            `;
            console.log('Used alternative method to set content'); // Debug
        }
    }
}

async function loadQuizQuestions() {
    try {
        if (!supabase) {
            return; // Use fallback data already in quizData
        }
        
        const { data, error } = await supabase
            .from('quiz_questions')
            .select('*')
            .order('created_at', { ascending: true });
        
        if (error) throw error;
        
        if (data && data.length > 0) {
            // Transform database format to quiz format
            quizData = data.map(item => ({
                question: item.question,
                options: item.options,
                correct: item.correct,
                category: item.category,
                explanation: item.explanation
            }));
        }
    } catch (error) {
        // Use fallback data if database fails
    }
}

function setupEventListeners() {
    elements.startBtn.addEventListener('click', startQuiz);
    elements.prevBtn.addEventListener('click', previousQuestion);
    elements.nextBtn.addEventListener('click', nextQuestion);
    elements.submitBtn.addEventListener('click', submitQuiz);
    elements.retryBtn.addEventListener('click', retryQuiz);
    elements.reviewBtn.addEventListener('click', showReview);
    elements.backToResultsBtn.addEventListener('click', showResults);
}

function startQuiz() {
    quizStarted = true;
    currentQuestion = 0;
    userAnswers = [];
    
    // Initialize timer
    timeRemaining = quizSettings.timeLimit * 60; // Convert minutes to seconds
    startTimer();
    
    showSection('questions');
    displayQuestion();
}

function showSection(sectionName) {
    // Hide all sections
    Object.values(quizSections).forEach(section => {
        section.classList.remove('active');
    });
    
    // Show target section
    quizSections[sectionName].classList.add('active');
}

function displayQuestion() {
    const question = quizData[currentQuestion];
    
    // Update progress
    const progress = ((currentQuestion + 1) / quizData.length) * 100;
    elements.progressBar.style.width = progress + '%';
    elements.questionCounter.textContent = currentQuestion + 1;
    
    // Display question
    elements.questionText.textContent = question.question;
    
    // Create answer options
    elements.answersContainer.innerHTML = '';
    question.options.forEach((option, index) => {
        const answerDiv = document.createElement('div');
        answerDiv.className = 'answer-option';
        answerDiv.innerHTML = `
            <input type="radio" name="answer" value="${index}" id="answer-${index}">
            <label for="answer-${index}" class="answer-label">${option}</label>
        `;
        
        // Add click handler
        answerDiv.addEventListener('click', () => selectAnswer(index));
        elements.answersContainer.appendChild(answerDiv);
    });
    
    // Restore previous answer if exists
    if (userAnswers[currentQuestion] !== undefined) {
        selectAnswer(userAnswers[currentQuestion]);
    }
    
    // Update button visibility
    elements.prevBtn.style.display = currentQuestion > 0 ? 'block' : 'none';
    elements.nextBtn.style.display = currentQuestion < quizData.length - 1 ? 'block' : 'none';
    elements.submitBtn.style.display = currentQuestion === quizData.length - 1 ? 'block' : 'none';
}

function selectAnswer(answerIndex) {
    // Remove previous selection
    document.querySelectorAll('.answer-option').forEach(option => {
        option.classList.remove('selected');
        option.querySelector('input').checked = false;
    });
    
    // Select new answer
    const selectedOption = document.querySelectorAll('.answer-option')[answerIndex];
    selectedOption.classList.add('selected');
    selectedOption.querySelector('input').checked = true;
    
    // Store answer
    userAnswers[currentQuestion] = answerIndex;
    
    // Enable next button
    elements.nextBtn.disabled = false;
    elements.submitBtn.disabled = false;
}

function previousQuestion() {
    if (currentQuestion > 0) {
        currentQuestion--;
        displayQuestion();
    }
}

function nextQuestion() {
    if (currentQuestion < quizData.length - 1) {
        currentQuestion++;
        displayQuestion();
    }
}

function submitQuiz() {
    if (userAnswers.length !== quizData.length) {
        Swal.fire({
            title: '–í–Ω–∏–º–∞–Ω–∏–µ!',
            text: '–ú–æ–ª—è, –æ—Ç–≥–æ–≤–æ—Ä–µ—Ç–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –≤—ä–ø—Ä–æ—Å–∏ –ø—Ä–µ–¥–∏ –¥–∞ –∑–∞–≤—ä—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç–∞.',
            icon: 'warning',
            confirmButtonText: '–†–∞–∑–±—Ä–∞—Ö',
            confirmButtonColor: '#007acc',
            background: '#ffffff',
            color: '#333333'
        });
        return;
    }
    
    stopTimer();
    quizCompleted = true;
    calculateResults();
    showSection('results');
}

function calculateResults() {
    // Calculate total score
    let correctAnswers = 0;
    const categoryScores = {};
    
    // Initialize category scores
    Object.keys(categories).forEach(cat => {
        categoryScores[cat] = { correct: 0, total: 0 };
    });
    
    // Calculate scores
    userAnswers.forEach((answer, index) => {
        const question = quizData[index];
        const isCorrect = answer === question.correct;
        
        if (isCorrect) correctAnswers++;
        
        // Track by category
        const category = question.category;
        categoryScores[category].total++;
        if (isCorrect) categoryScores[category].correct++;
    });
    
    // Display overall score
    const percentage = Math.round((correctAnswers / quizData.length) * 100);
    elements.scorePercentage.textContent = percentage + '%';
    
    // Score interpretation based on admin settings
    let scoreText = '';
    const passingScore = quizSettings.passingScore;
    
    if (percentage >= 90) {
        scoreText = '–û—Ç–ª–∏—á–Ω–æ! –ò–º–∞—Ç–µ –º–Ω–æ–≥–æ –¥–æ–±—Ä–∏ –ø–æ–∑–Ω–∞–Ω–∏—è –∑–∞ –∫–∏–±–µ—Ä—Ç–æ—Ä–º–æ–∑–∞ –∏ –¥–∏–≥–∏—Ç–∞–ª–Ω–∞—Ç–∞ –µ—Ç–∏–∫–∞.';
    } else if (percentage >= passingScore) {
        scoreText = `–ú–Ω–æ–≥–æ –¥–æ–±—Ä–µ! –ü—Ä–µ–º–∏–Ω–∞—Ö—Ç–µ —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∑—É–ª—Ç–∞—Ç –Ω–∞–¥ –º–∏–Ω–∏–º–∞–ª–Ω–∏—è –ø—Ä–∞–≥ –æ—Ç ${passingScore}%.`;
    } else if (percentage >= passingScore - 20) {
        scoreText = `–î–æ–±—Ä–µ! –ë–ª–∏–∑–æ —Å—Ç–µ –¥–æ –ø—Ä–µ–º–∏–Ω–∞–≤–∞–Ω–µ, –Ω–æ —Å–µ –Ω—É–∂–¥–∞–µ—Ç–µ –æ—Ç —Ä–µ–∑—É–ª—Ç–∞—Ç –Ω–∞–¥ ${passingScore}%.`;
    } else {
        scoreText = `–ó–∞ –¥–∞ –ø—Ä–µ–º–∏–Ω–µ—Ç–µ —Ç–µ—Å—Ç–∞, —Å–µ –Ω—É–∂–¥–∞–µ—Ç–µ –æ—Ç –º–∏–Ω–∏–º—É–º ${passingScore}%. –ü—Ä–µ–ø–æ—Ä—ä—á–≤–∞–º–µ –¥–∞ –∏–∑—É—á–∏—Ç–µ –ø–æ–≤–µ—á–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.`;
    }
    
    elements.scoreText.textContent = `${correctAnswers} –æ—Ç ${quizData.length} –ø—Ä–∞–≤–∏–ª–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∞. ${scoreText}`;
    
    // Display category breakdown
    displayCategoryBreakdown(categoryScores);
    
    // Show/hide review button based on settings
    const reviewBtn = document.getElementById('review-answers');
    if (reviewBtn) {
        reviewBtn.style.display = quizSettings.showExplanations ? 'block' : 'none';
    }
}

function displayCategoryBreakdown(categoryScores) {
    elements.categoriesBreakdown.innerHTML = '';
    
    Object.entries(categoryScores).forEach(([catKey, scores]) => {
        if (scores.total === 0) return;
        
        const percentage = Math.round((scores.correct / scores.total) * 100);
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'category-result';
        
        let scoreClass = 'poor';
        if (percentage >= 90) scoreClass = 'excellent';
        else if (percentage >= 70) scoreClass = 'good';
        else if (percentage >= 50) scoreClass = 'needs-improvement';
        
        categoryDiv.innerHTML = `
            <span class="category-name">${categories[catKey]}</span>
            <span class="category-score ${scoreClass}">${scores.correct}/${scores.total} (${percentage}%)</span>
        `;
        
        elements.categoriesBreakdown.appendChild(categoryDiv);
    });
}

function showReview() {
    showSection('review');
    displayReview();
}

function displayReview() {
    elements.reviewContainer.innerHTML = '';
    
    quizData.forEach((question, index) => {
        const reviewDiv = document.createElement('div');
        reviewDiv.className = 'review-question';
        
        const userAnswer = userAnswers[index];
        const isCorrect = userAnswer === question.correct;
        
        reviewDiv.innerHTML = `
            <div class="review-question-text">–í—ä–ø—Ä–æ—Å ${index + 1}: ${question.question}</div>
            <div class="review-answers">
                ${question.options.map((option, optIndex) => {
                    let answerClass = 'neutral';
                    if (optIndex === question.correct) {
                        answerClass = 'correct';
                    } else if (optIndex === userAnswer && !isCorrect) {
                        answerClass = 'incorrect';
                    }
                    
                    const prefix = optIndex === userAnswer ? '–í–∞—à–∏—è—Ç –æ—Ç–≥–æ–≤–æ—Ä: ' : 
                                 optIndex === question.correct ? '–ü—Ä–∞–≤–∏–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä: ' : '';
                    
                    return `<div class="review-answer ${answerClass}">${prefix}${option}</div>`;
                }).join('')}
            </div>
            ${quizSettings.showExplanations ? `<div class="answer-explanation">${question.explanation}</div>` : ''}
        `;
        
        elements.reviewContainer.appendChild(reviewDiv);
    });
}

function showResults() {
    showSection('results');
}

function startTimer() {
    // Update timer display initially
    updateTimerDisplay();
    
    // Clear any existing timer
    if (quizTimer) {
        clearInterval(quizTimer);
    }
    
    // Start countdown
    quizTimer = setInterval(() => {
        timeRemaining--;
        updateTimerDisplay();
        
        // Check if time is up
        if (timeRemaining <= 0) {
            timeUp();
        }
    }, 1000);
}

function updateTimerDisplay() {
    const minutes = Math.floor(timeRemaining / 60);
    const seconds = timeRemaining % 60;
    const displayTime = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    const timerElement = document.getElementById('time-remaining');
    if (timerElement) {
        timerElement.textContent = displayTime;
        
        // Add warning classes based on time remaining
        const timerContainer = document.getElementById('timer-display');
        if (timerContainer) {
            timerContainer.classList.remove('warning', 'danger');
            
            if (timeRemaining <= 60) { // Less than 1 minute
                timerContainer.classList.add('danger');
            } else if (timeRemaining <= 300) { // Less than 5 minutes
                timerContainer.classList.add('warning');
            }
        }
    }
}

function stopTimer() {
    if (quizTimer) {
        clearInterval(quizTimer);
        quizTimer = null;
    }
}

function timeUp() {
    stopTimer();
    
    Swal.fire({
        title: '–í—Ä–µ–º–µ—Ç–æ –∏–∑—Ç–µ—á–µ!',
        text: '–¢–µ—Å—Ç–∞ —â–µ –±—ä–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–µ–¥–∞–¥–µ–Ω.',
        icon: 'warning',
        confirmButtonText: '–†–∞–∑–±—Ä–∞—Ö',
        confirmButtonColor: '#007acc',
        allowOutsideClick: false,
        allowEscapeKey: false
    }).then(() => {
        // Submit quiz automatically
        quizCompleted = true;
        calculateResults();
        showSection('results');
    });
}

function retryQuiz() {
    currentQuestion = 0;
    userAnswers = [];
    quizStarted = false;
    quizCompleted = false;
    stopTimer();
    showSection('info');
}

 